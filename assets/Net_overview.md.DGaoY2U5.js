import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Cd-3tpCq.js";const E=JSON.parse('{"title":"笔记","description":"","frontmatter":{},"headers":[],"relativePath":"Net/overview.md","filePath":"Net/overview.md"}'),e={name:"Net/overview.md"};function l(h,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="笔记" tabindex="-1">笔记 <a class="header-anchor" href="#笔记" aria-label="Permalink to &quot;笔记&quot;">​</a></h1><h2 id="包" tabindex="-1">包 <a class="header-anchor" href="#包" aria-label="Permalink to &quot;包&quot;">​</a></h2><h3 id="microsoft-aspnetcore-http-用于访问http上下文" tabindex="-1">Microsoft.AspNetCore.Http 用于访问HTTP上下文 <a class="header-anchor" href="#microsoft-aspnetcore-http-用于访问http上下文" aria-label="Permalink to &quot;Microsoft.AspNetCore.Http 用于访问HTTP上下文&quot;">​</a></h3><h4 id="httpcontext" tabindex="-1">HttpContext <a class="header-anchor" href="#httpcontext" aria-label="Permalink to &quot;HttpContext&quot;">​</a></h4><h3 id="microsoft-aspnetcore-mvc-提供mvc相关功能" tabindex="-1">Microsoft.AspNetCore.Mvc 提供MVC相关功能 <a class="header-anchor" href="#microsoft-aspnetcore-mvc-提供mvc相关功能" aria-label="Permalink to &quot;Microsoft.AspNetCore.Mvc 提供MVC相关功能&quot;">​</a></h3><h4 id="controllerbase" tabindex="-1">ControllerBase <a class="header-anchor" href="#controllerbase" aria-label="Permalink to &quot;ControllerBase&quot;">​</a></h4><h4 id="apicontroller" tabindex="-1">ApiController <a class="header-anchor" href="#apicontroller" aria-label="Permalink to &quot;ApiController&quot;">​</a></h4><p>启用API特定行为，如自动模型验证和问题详情响应</p><h3 id="newtonsoft-json-json序列化" tabindex="-1">Newtonsoft.Json JSON序列化 <a class="header-anchor" href="#newtonsoft-json-json序列化" aria-label="Permalink to &quot;Newtonsoft.Json JSON序列化&quot;">​</a></h3><h3 id="newtonsoft-json-serialization-json反序列化" tabindex="-1">Newtonsoft.Json.Serialization JSON反序列化 <a class="header-anchor" href="#newtonsoft-json-serialization-json反序列化" aria-label="Permalink to &quot;Newtonsoft.Json.Serialization JSON反序列化&quot;">​</a></h3><h3 id="microsoft-aspnetcore-authorization-授权" tabindex="-1">Microsoft.AspNetCore.Authorization 授权 <a class="header-anchor" href="#microsoft-aspnetcore-authorization-授权" aria-label="Permalink to &quot;Microsoft.AspNetCore.Authorization 授权&quot;">​</a></h3><h4 id="authorize" tabindex="-1">Authorize <a class="header-anchor" href="#authorize" aria-label="Permalink to &quot;Authorize&quot;">​</a></h4><p>身份控制器及其派生控制器的访问，仅允许已认证用户。</p><p>通过 <code>[Authorize]</code> 属性实现授权。</p><h2 id="类属性" tabindex="-1">类属性 <a class="header-anchor" href="#类属性" aria-label="Permalink to &quot;类属性&quot;">​</a></h2><h3 id="route" tabindex="-1">[Route] <a class="header-anchor" href="#route" aria-label="Permalink to &quot;[Route]&quot;">​</a></h3><h4 id="route-api-controller" tabindex="-1">[Route(&quot;api/[controller]&quot;)] <a class="header-anchor" href="#route-api-controller" aria-label="Permalink to &quot;[Route(&quot;api/[controller]&quot;)]&quot;">​</a></h4><p>定义API端点的基本路由，<code>[controller]</code>会被替换为派生控制器的名称，例如<code>UserController</code>对应<code>api/Users</code></p><h2 id="教程" tabindex="-1">教程 <a class="header-anchor" href="#教程" aria-label="Permalink to &quot;教程&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><p>属性是封装类字段的一种方式，方便控制“读”和“写”的权限，同时可以添加额外逻辑。</p><p>属性 = 字段 + 方法(get/set) 的封装方式。它看起来像字段，但本质上是调用了方法。</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _name; }   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取值（读）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置值（写）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际上调用的是 set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.Name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际上调用的是 get</span></span></code></pre></div><p>感觉起了拦截器的作用，可以在<code>set</code>或者<code>get</code>时做一些事情。</p><h2 id="片段" tabindex="-1">片段 <a class="header-anchor" href="#片段" aria-label="Permalink to &quot;片段&quot;">​</a></h2><h3 id="serializesetting" tabindex="-1">SerializeSetting <a class="header-anchor" href="#serializesetting" aria-label="Permalink to &quot;SerializeSetting&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonSerializerSettings SerializeSetting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Newtonsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonSerializerSettings</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Newtonsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonSerializerSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        settings.ContractResolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultContractResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>DefaultContractResolver</code>表示序列化时属性名称将保持原样(Pascal命名，如<code>UserName</code>)</li><li><code>CamelCasePropertyNamesContractResolver</code>则序列化输出会变成小驼峰(如<code>userName</code>)</li></ul><p>使用方法：</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-jsonresult&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonResult</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetJsonResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { UserName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, SerializeSetting);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &quot;UserName&quot;: &quot;张三&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &quot;Age&quot;: 28</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><h3 id="currentuser" tabindex="-1">CurrentUser <a class="header-anchor" href="#currentuser" aria-label="Permalink to &quot;CurrentUser&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MemberLoginDto CurrentUser</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MemberLoginDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> claimUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpContext.User.Claims.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FirstOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UserInfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (claimUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Newtonsoft.Json.JsonConvert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeserializeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MemberLoginDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(claimUser.Value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>从 <code>HttpContext.User.Claims</code> 中获取当前请求的用户声明（Claims）集合。</li><li>查找类型为 &quot;UserInfo&quot; 的声明，预期其包含 JSON 序列化的 MemberLoginDto 对象。</li><li>使用 Json.NET 把 Claim 中的字符串（JSON 格式）还原成一个 MemberLoginDto 对象。</li><li>如果未找到 &quot;UserInfo&quot; 声明，返回默认的 MemberLoginDto。</li><li>用于在认证端点中访问用户详细信息（如 ID、用户名）。</li></ul>`,33)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
